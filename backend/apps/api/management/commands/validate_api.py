from django.core.management.base import BaseCommand
from django.urls import reverse
from django.test import Client
from rest_framework.routers import DefaultRouter
from apps.api.urls import router
import json

class Command(BaseCommand):
    help = '–í–∞–ª—ñ–¥–∞—Ü—ñ—è API endpoints –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–º–∏–ª–æ–∫'

    def add_arguments(self, parser):
        parser.add_argument('--fix', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏')
        parser.add_argument('--verbose', action='store_true', help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')

    def handle(self, *args, **options):
        self.verbose = options['verbose']
        self.fix_mode = options['fix']
        
        self.stdout.write(self.style.SUCCESS('üîç –ü–æ—á–∞—Ç–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é API endpoints...'))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.client = Client()
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.check_duplicates()
        self.check_missing_endpoints()
        self.check_endpoint_responses()
        self.check_optimization_opportunities()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))

    def check_duplicates(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—É–±–ª—é–≤–∞–Ω–Ω—è endpoints"""
        self.stdout.write('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è endpoints...')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ URLs
        registered_urls = []
        for prefix, viewset, basename in router.registry:
            registered_urls.append(f'/api/v1/{prefix}/')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
        duplicates = []
        seen = set()
        
        for url in registered_urls:
            if url in seen:
                duplicates.append(url)
            seen.add(url)
        
        if duplicates:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è: {duplicates}'))
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ –î—É–±–ª—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'))

    def check_missing_endpoints(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥—Å—É—Ç–Ω—ñ endpoints"""
        self.stdout.write('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö endpoints...')
        
        expected_endpoints = [
            'homepage', 'about', 'team-members',
            'services', 'projects', 'project-categories',
            'jobs', 'job-applications', 'workplace-photos',
            'partnership-info', 'work-stages', 'partner-inquiries',
            'offices', 'contact-inquiries', 'content'
        ]
        
        registered_prefixes = [prefix for prefix, _, _ in router.registry]
        missing = [ep for ep in expected_endpoints if ep not in registered_prefixes]
        
        if missing:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ endpoints: {missing}'))
            if self.fix_mode:
                self.stdout.write('üîß –†–µ–∂–∏–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –¥–æ–¥–∞–π—Ç–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ ViewSets')
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ endpoints –ø—Ä–∏—Å—É—Ç–Ω—ñ'))

    def check_endpoint_responses(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ endpoints"""
        self.stdout.write('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π endpoints...')
        
        test_endpoints = [
            '/api/v1/',
            '/api/v1/content/stats/',
            '/api/v1/content/featured/',
            '/api/v1/health/',
        ]
        
        for endpoint in test_endpoints:
            try:
                response = self.client.get(endpoint)
                if response.status_code == 200:
                    if self.verbose:
                        self.stdout.write(f'‚úÖ {endpoint} - OK')
                else:
                    self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è {endpoint} - Status: {response.status_code}'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå {endpoint} - Error: {str(e)}'))

    def check_optimization_opportunities(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        self.stdout.write('üîç –ê–Ω–∞–ª—ñ–∑ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...')
        
        optimizations = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ViewSets
        viewset_count = len(router.registry)
        if viewset_count > 15:
            optimizations.append(f'–ë–∞–≥–∞—Ç–æ ViewSets ({viewset_count}), —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ –æ–±\'—î–¥–Ω–∞–Ω–Ω—è')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö endpoints
        registered_prefixes = [prefix for prefix, _, _ in router.registry]
        if 'content' not in registered_prefixes:
            optimizations.append('–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π ContentViewSet')
        
        if optimizations:
            self.stdout.write(self.style.WARNING('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:'))
            for opt in optimizations:
                self.stdout.write(f'  ‚Ä¢ {opt}')
        else:
            self.stdout.write(self.style.SUCCESS('‚úÖ API –¥–æ–±—Ä–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ'))

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω API"""
        report = {
            'total_viewsets': len(router.registry),
            'registered_endpoints': [prefix for prefix, _, _ in router.registry],
            'timestamp': '2024-01-01T00:00:00Z'
        }
        
        with open('api_validation_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        self.stdout.write(self.style.SUCCESS('üìä –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ api_validation_report.json'))