# backend/apps/api/management/commands/validate_translations.py
from django.core.management.base import BaseCommand
from django.conf import settings
from apps.api.utils.translations import TranslationUtils
import json
import re

class Command(BaseCommand):
    help = '–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–∞ –ø–æ–≤–Ω–æ—Ç—É —Ç–∞ —è–∫—ñ—Å—Ç—å'

    def add_arguments(self, parser):
        parser.add_argument(
            '--fix',
            action='store_true',
            help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –¥–µ—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏'
        )
        parser.add_argument(
            '--detailed',
            action='store_true',
            help='–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏'
        )
        parser.add_argument(
            '--export-report',
            type=str,
            help='–ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É –≤ JSON —Ñ–∞–π–ª'
        )

    def handle(self, *args, **options):
        self.fix_mode = options['fix']
        self.detailed = options['detailed']
        self.export_file = options['export_report']
        
        self.stdout.write('üîç –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...')
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
        self.report = {
            'missing_translations': {},
            'inconsistent_keys': [],
            'formatting_issues': {},
            'duplicate_values': {},
            'empty_translations': {},
            'placeholder_issues': {},
            'summary': {}
        }
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.check_missing_translations()
        self.check_formatting_consistency()
        self.check_duplicate_values()
        self.check_empty_translations()
        self.check_placeholder_consistency()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        self.generate_summary()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        self.display_results()
        
        # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∑–≤—ñ—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if self.export_file:
            self.export_report()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        if self.fix_mode:
            self.auto_fix_issues()

    def check_missing_translations(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –º—ñ–∂ –º–æ–≤–∞–º–∏"""
        self.stdout.write('üìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...')
        
        missing = TranslationUtils.validate_translations()
        self.report['missing_translations'] = missing
        
        if missing:
            total_missing = sum(len(keys) for keys in missing.values())
            self.stdout.write(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {total_missing} –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
            
            if self.detailed:
                for lang, keys in missing.items():
                    self.stdout.write(f'  {lang}: {len(keys)} –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö')
                    for key in keys[:3]:
                        self.stdout.write(f'    - {key}')
                    if len(keys) > 3:
                        self.stdout.write(f'    ... —Ç–∞ —â–µ {len(keys) - 3}')
        else:
            self.stdout.write('‚úÖ –í—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ')

    def check_formatting_consistency(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"""
        self.stdout.write('üé® –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è...')
        
        issues = {}
        
        for lang_code, _ in settings.LANGUAGES:
            translations = TranslationUtils.load_translations(lang_code)
            lang_issues = []
            
            for key, value in translations.items():
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTML —Ç–µ–≥—ñ–≤
                if '<' in value and '>' in value:
                    if not self.is_valid_html_snippet(value):
                        lang_issues.append({
                            'key': key,
                            'issue': 'invalid_html',
                            'value': value
                        })
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
                if key.endswith('.title') or key.endswith('.heading'):
                    if value.endswith('.'):
                        lang_issues.append({
                            'key': key,
                            'issue': 'title_with_period',
                            'value': value
                        })
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É/–∫—ñ–Ω—Ü—ñ
                if value.strip() != value:
                    lang_issues.append({
                        'key': key,
                        'issue': 'whitespace_padding',
                        'value': value
                    })
            
            if lang_issues:
                issues[lang_code] = lang_issues
        
        self.report['formatting_issues'] = issues
        
        if issues:
            total_issues = sum(len(lang_issues) for lang_issues in issues.values())
            self.stdout.write(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {total_issues} –ø—Ä–æ–±–ª–µ–º –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º')
        else:
            self.stdout.write('‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–µ')

    def check_duplicate_values(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω—å (–º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è)"""
        self.stdout.write('üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...')
        
        duplicates = {}
        
        for lang_code, _ in settings.LANGUAGES:
            translations = TranslationUtils.load_translations(lang_code)
            value_to_keys = {}
            
            # –ì—Ä—É–ø—É—î–º–æ –∫–ª—é—á—ñ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
            for key, value in translations.items():
                if value in value_to_keys:
                    value_to_keys[value].append(key)
                else:
                    value_to_keys[value] = [key]
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–≤–∏–∫–ª—é—á–∞—î–º–æ –æ—á–µ–≤–∏–¥–Ω—ñ)
            lang_duplicates = {}
            for value, keys in value_to_keys.items():
                if len(keys) > 1 and len(value) > 3:  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ "–¢–∞–∫", "–ù—ñ"
                    # –í–∏–∫–ª—é—á–∞—î–º–æ —Å—Ö–æ–∂—ñ –∫–ª—é—á—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, button.save —Ç–∞ form.save)
                    if not self.are_related_keys(keys):
                        lang_duplicates[value] = keys
            
            if lang_duplicates:
                duplicates[lang_code] = lang_duplicates
        
        self.report['duplicate_values'] = duplicates
        
        if duplicates:
            total_duplicates = sum(len(dups) for dups in duplicates.values())
            self.stdout.write(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {total_duplicates} –º–æ–∂–ª–∏–≤–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤')
        else:
            self.stdout.write('‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')

    def check_empty_translations(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ä–æ–∂–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏"""
        self.stdout.write('üà≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...')
        
        empty = {}
        
        for lang_code, _ in settings.LANGUAGES:
            translations = TranslationUtils.load_translations(lang_code)
            empty_keys = []
            
            for key, value in translations.items():
                if not value or value.strip() == '':
                    empty_keys.append(key)
            
            if empty_keys:
                empty[lang_code] = empty_keys
        
        self.report['empty_translations'] = empty
        
        if empty:
            total_empty = sum(len(keys) for keys in empty.values())
            self.stdout.write(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {total_empty} –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
        else:
            self.stdout.write('‚úÖ –ü–æ—Ä–æ–∂–Ω—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–µ–º–∞—î')

    def check_placeholder_consistency(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ –º—ñ–∂ –º–æ–≤–∞–º–∏"""
        self.stdout.write('üîó –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤...')
        
        placeholder_issues = {}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ
        all_keys = set()
        for lang_code, _ in settings.LANGUAGES:
            translations = TranslationUtils.load_translations(lang_code)
            all_keys.update(translations.keys())
        
        for key in all_keys:
            lang_placeholders = {}
            
            # –ó–±–∏—Ä–∞—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
            for lang_code, _ in settings.LANGUAGES:
                translations = TranslationUtils.load_translations(lang_code)
                if key in translations:
                    placeholders = self.extract_placeholders(translations[key])
                    if placeholders:
                        lang_placeholders[lang_code] = placeholders
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å
            if lang_placeholders:
                placeholder_sets = list(lang_placeholders.values())
                if len(set(tuple(sorted(ps)) for ps in placeholder_sets)) > 1:
                    placeholder_issues[key] = lang_placeholders
        
        self.report['placeholder_issues'] = placeholder_issues
        
        if placeholder_issues:
            self.stdout.write(f'‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(placeholder_issues)} –ø—Ä–æ–±–ª–µ–º –∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏')
        else:
            self.stdout.write('‚úÖ –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ')

    def extract_placeholders(self, text):
        """–í–∏—Ç—è–≥—É—î –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –∑ —Ç–µ–∫—Å—Ç—É"""
        # –®—É–∫–∞—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
        patterns = [
            r'\{(\w+)\}',  # {name}
            r'\{\{(\w+)\}\}',  # {{name}}
            r'%\((\w+)\)s',  # %(name)s
            r'%(\w+)%',  # %name%
        ]
        
        placeholders = set()
        for pattern in patterns:
            matches = re.findall(pattern, text)
            placeholders.update(matches)
        
        return sorted(list(placeholders))

    def is_valid_html_snippet(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î HTML —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–∞–ª—ñ–¥–Ω–∏–º"""
        try:
            from html.parser import HTMLParser
            
            class ValidationParser(HTMLParser):
                def __init__(self):
                    super().__init__()
                    self.errors = []
                
                def error(self, message):
                    self.errors.append(message)
            
            parser = ValidationParser()
            parser.feed(f"<div>{text}</div>")
            return len(parser.errors) == 0
        except:
            return False

    def are_related_keys(self, keys):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–ª—é—á—ñ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ (—Å—Ö–æ–∂–∏–º–∏ –∑–∞ –∑–º—ñ—Å—Ç–æ–º)"""
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: —è–∫—â–æ –∫–ª—é—á—ñ –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏
        if len(keys) < 2:
            return True
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        key_parts = [key.split('.') for key in keys]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å–ø—ñ–ª—å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏
        for i, parts1 in enumerate(key_parts):
            for j, parts2 in enumerate(key_parts[i+1:], i+1):
                common_parts = set(parts1) & set(parts2)
                if len(common_parts) >= 1:
                    return True
        
        return False

    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥—Å—É–º–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
        summary = {
            'total_languages': len(settings.LANGUAGES),
            'missing_count': sum(len(keys) for keys in self.report['missing_translations'].values()),
            'formatting_issues_count': sum(len(issues) for issues in self.report['formatting_issues'].values()),
            'duplicate_values_count': sum(len(dups) for dups in self.report['duplicate_values'].values()),
            'empty_translations_count': sum(len(keys) for keys in self.report['empty_translations'].values()),
            'placeholder_issues_count': len(self.report['placeholder_issues']),
        }
        
        summary['total_issues'] = (
            summary['missing_count'] + 
            summary['formatting_issues_count'] + 
            summary['duplicate_values_count'] + 
            summary['empty_translations_count'] + 
            summary['placeholder_issues_count']
        )
        
        summary['health_score'] = max(0, 100 - (summary['total_issues'] * 2))
        
        self.report['summary'] = summary

    def display_results(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
        summary = self.report['summary']
        
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üìä –ü–Ü–î–°–£–ú–û–ö –í–ê–õ–Ü–î–ê–¶–Ü–á'))
        self.stdout.write('=' * 50)
        
        if summary['total_issues'] == 0:
            self.stdout.write(self.style.SUCCESS('üéâ –í—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤–∞–ª—ñ–¥–Ω—ñ!'))
        else:
            self.stdout.write(f"üìà –û—Ü—ñ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤'—è: {summary['health_score']}/100")
            self.stdout.write(f"üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º: {summary['total_issues']}")
            
            if summary['missing_count']:
                self.stdout.write(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏: {summary['missing_count']}")
            
            if summary['formatting_issues_count']:
                self.stdout.write(f"üé® –ü—Ä–æ–±–ª–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {summary['formatting_issues_count']}")
            
            if summary['duplicate_values_count']:
                self.stdout.write(f"üîÑ –î—É–±–ª—ñ–∫–∞—Ç–∏: {summary['duplicate_values_count']}")
            
            if summary['empty_translations_count']:
                self.stdout.write(f"üà≥ –ü–æ—Ä–æ–∂–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏: {summary['empty_translations_count']}")
            
            if summary['placeholder_issues_count']:
                self.stdout.write(f"üîó –ü—Ä–æ–±–ª–µ–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤: {summary['placeholder_issues_count']}")

    def export_report(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –∑–≤—ñ—Ç —É JSON —Ñ–∞–π–ª"""
        try:
            with open(self.export_file, 'w', encoding='utf-8') as f:
                json.dump(self.report, f, ensure_ascii=False, indent=2)
            self.stdout.write(f'üìÑ –ó–≤—ñ—Ç –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {self.export_file}')
        except Exception as e:
            self.stdout.write(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}')

    def auto_fix_issues(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –¥–µ—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏"""
        self.stdout.write('')
        self.stdout.write('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...')
        
        fixed_count = 0
        
        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        if self.report['missing_translations']:
            fixed_count += TranslationUtils.sync_translation_keys()
        
        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –≤ –∫—ñ–Ω—Ü—ñ/–Ω–∞ –ø–æ—á–∞—Ç–∫—É
        for lang_code, issues in self.report['formatting_issues'].items():
            translations = TranslationUtils.load_translations(lang_code)
            changes_made = False
            
            for issue in issues:
                if issue['issue'] == 'whitespace_padding':
                    key = issue['key']
                    old_value = translations[key]
                    new_value = old_value.strip()
                    
                    if old_value != new_value:
                        translations[key] = new_value
                        changes_made = True
                        fixed_count += 1
            
            if changes_made:
                TranslationUtils.save_translations(translations, lang_code)
        
        if fixed_count > 0:
            self.stdout.write(f'‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –ø—Ä–æ–±–ª–µ–º')
        else:
            self.stdout.write('‚ÑπÔ∏è –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è')