# backend/apps/api/management/commands/export_frontend_translations.py
import json
import os
from django.core.management.base import BaseCommand
from django.conf import settings
from apps.api.utils import TranslationUtils

class Command(BaseCommand):
    help = '–ï–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É'

    def add_arguments(self, parser):
        parser.add_argument(
            '--output', 
            type=str, 
            default='frontend/public/translations',
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É (–≤—ñ–¥–Ω–æ—Å–Ω–æ BASE_DIR)'
        )
        parser.add_argument(
            '--format', 
            type=str, 
            choices=['flat', 'nested'], 
            default='flat',
            help='–§–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É: flat (–∫–ª—é—á—ñ —á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É) –∞–±–æ nested (–≤–∫–ª–∞–¥–µ–Ω—ñ –æ–±\'—î–∫—Ç–∏)'
        )
        parser.add_argument(
            '--minify',
            action='store_true',
            help='–ú—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ JSON (–±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤)'
        )
        parser.add_argument(
            '--validate',
            action='store_true',
            help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø–µ—Ä–µ–¥ –µ–∫—Å–ø–æ—Ä—Ç–æ–º'
        )

    def handle(self, *args, **options):
        output_dir = os.path.join(settings.BASE_DIR, options['output'])
        export_format = options['format']
        minify = options['minify']
        validate = options['validate']
        
        self.stdout.write('üöÄ –ü–æ—á–∞—Ç–æ–∫ –µ–∫—Å–ø–æ—Ä—Ç—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É...')
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –µ–∫—Å–ø–æ—Ä—Ç–æ–º
        if validate:
            self.stdout.write('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...')
            missing = TranslationUtils.validate_translations()
            
            if missing:
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏:'))
                for lang, keys in missing.items():
                    self.stdout.write(f'  {lang}: {len(keys)} –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–ª—é—á—ñ–≤')
                    for key in keys[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                        self.stdout.write(f'    - {key}')
                    if len(keys) > 5:
                        self.stdout.write(f'    ... —ñ —â–µ {len(keys) - 5}')
                
                # –ó–∞–ø–∏—Ç—É—î–º–æ —á–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
                response = input('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç? (y/N): ')
                if response.lower() != 'y':
                    self.stdout.write('–ï–∫—Å–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ')
                    return
            else:
                self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –Ω–∞ –º—ñ—Å—Ü—ñ'))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        os.makedirs(output_dir, exist_ok=True)
        self.stdout.write(f'üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {output_dir}')
        
        # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
        exported_files = []
        total_translations = 0
        
        for lang_code, lang_name in settings.LANGUAGES:
            self.stdout.write(f'üì§ –ï–∫—Å–ø–æ—Ä—Ç {lang_name} ({lang_code})...')
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
            translations = TranslationUtils.load_translations(lang_code)
            
            if not translations:
                self.stdout.write(f'‚ö†Ô∏è –ù–µ–º–∞—î –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è {lang_code}')
                continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if export_format == 'nested':
                translations = self.convert_to_nested(translations)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
            output_file = os.path.join(output_dir, f'{lang_code}.json')
            
            with open(output_file, 'w', encoding='utf-8') as f:
                if minify:
                    json.dump(translations, f, ensure_ascii=False, separators=(',', ':'))
                else:
                    json.dump(translations, f, ensure_ascii=False, indent=2)
            
            file_size = os.path.getsize(output_file)
            translation_count = self.count_translations(translations)
            
            exported_files.append({
                'file': output_file,
                'language': lang_code,
                'size': file_size,
                'count': translation_count
            })
            
            total_translations += translation_count
            
            self.stdout.write(f'‚úÖ {lang_code}: {translation_count} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤, {file_size} –±–∞–π—Ç')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ç–∞—Ñ–∞–π–ª –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –µ–∫—Å–ø–æ—Ä—Ç
        self.create_export_metadata(output_dir, exported_files, export_format, minify)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ TypeScript —Ç–∏–ø–∏ (—è–∫—â–æ —î –ø–µ—Ä–µ–∫–ª–∞–¥–∏)
        if exported_files and export_format == 'flat':
            self.generate_typescript_types(output_dir, exported_files[0])
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        self.stdout.write(self.style.SUCCESS('üéâ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
        self.stdout.write(f'üìä –ó–∞–≥–∞–ª–æ–º: {len(exported_files)} –º–æ–≤, {total_translations} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤')
        self.stdout.write(f'üìÇ –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {output_dir}')
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        self.show_usage_examples(output_dir)
    
    def convert_to_nested(self, flat_translations):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –ø–ª–æ—Å–∫—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ –≤–∫–ª–∞–¥–µ–Ω—ñ –æ–±'—î–∫—Ç–∏"""
        nested = {}
        
        for key, value in flat_translations.items():
            keys = key.split('.')
            current = nested
            
            for k in keys[:-1]:
                if k not in current:
                    current[k] = {}
                current = current[k]
            
            current[keys[-1]] = value
        
        return nested
    
    def count_translations(self, translations):
        """–†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (–¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)"""
        if isinstance(translations, dict):
            count = 0
            for value in translations.values():
                if isinstance(value, dict):
                    count += self.count_translations(value)
                else:
                    count += 1
            return count
        return 1
    
    def create_export_metadata(self, output_dir, exported_files, export_format, minify):
        """–°—Ç–≤–æ—Ä—é—î –º–µ—Ç–∞—Ñ–∞–π–ª –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –µ–∫—Å–ø–æ—Ä—Ç"""
        import datetime
        
        metadata = {
            'export_date': datetime.datetime.now().isoformat(),
            'format': export_format,
            'minified': minify,
            'files': [
                {
                    'language': f['language'],
                    'filename': os.path.basename(f['file']),
                    'size_bytes': f['size'],
                    'translation_count': f['count']
                }
                for f in exported_files
            ],
            'total_files': len(exported_files),
            'total_translations': sum(f['count'] for f in exported_files),
            'django_version': getattr(settings, 'DJANGO_VERSION', 'unknown'),
            'languages': dict(settings.LANGUAGES)
        }
        
        metadata_file = os.path.join(output_dir, 'export-metadata.json')
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        self.stdout.write(f'üìã –ú–µ—Ç–∞–¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {metadata_file}')
    
    def generate_typescript_types(self, output_dir, sample_file):
        """–ì–µ–Ω–µ—Ä—É—î TypeScript —Ç–∏–ø–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∏–ø—ñ–≤
            with open(sample_file['file'], 'r', encoding='utf-8') as f:
                translations = json.load(f)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∏–ø–∏
            type_definitions = self.generate_ts_interface(translations)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª —Ç–∏–ø—ñ–≤
            types_file = os.path.join(output_dir, 'translations.d.ts')
            with open(types_file, 'w', encoding='utf-8') as f:
                f.write(type_definitions)
            
            self.stdout.write(f'üìù TypeScript —Ç–∏–ø–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {types_file}')
            
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó TypeScript —Ç–∏–ø—ñ–≤: {e}')
    
    def generate_ts_interface(self, translations):
        """–ì–µ–Ω–µ—Ä—É—î TypeScript —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        lines = [
            '// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ TypeScript —Ç–∏–ø–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤',
            '// –ù–ï –†–ï–î–ê–ì–£–ô–¢–ï –¶–ï–ô –§–ê–ô–õ –í–†–£–ß–ù–£ - –≤—ñ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î—Ç—å—Å—è –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ',
            '',
            'export type TranslationKey = '
        ]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–ª—é—á—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–Ω–æ—Å—Ç—ñ
        sorted_keys = sorted(translations.keys())
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –∫–ª—é—á —è–∫ –ª—ñ—Ç–µ—Ä–∞–ª —Ç–∏–ø—É
        key_lines = []
        for key in sorted_keys:
            key_lines.append(f'  | "{key}"')
        
        lines.extend(key_lines)
        lines.append(';')
        lines.append('')
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±'—î–∫—Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        lines.extend([
            'export interface Translations {',
            '  [key in TranslationKey]: string;',
            '}',
            '',
            '// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ç–∏–ø–∏',
            'export type SupportedLanguage = "uk" | "en";',
            '',
            'export interface TranslationResponse {',
            '  language: string;',
            '  translations: Translations;',
            '  count: number;',
            '  source: "static" | "dynamic" | "combined";',
            '  available_languages?: string[];',
            '}',
            ''
        ])
        
        return '\n'.join(lines)
    
    def show_usage_examples(self, output_dir):
        """–ü–æ–∫–∞–∑—É—î –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:'))
        self.stdout.write('')
        
        # JavaScript/TypeScript –ø—Ä–∏–∫–ª–∞–¥
        self.stdout.write('üìú JavaScript/TypeScript:')
        self.stdout.write('''
// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
const response = await fetch('/translations/uk.json');
const translations = await response.json();

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
const title = translations['page.home.title'];
console.log(title); // "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"

// –ó TypeScript —Ç–∏–ø–∞–º–∏
import type { TranslationKey, Translations } from './translations';

function t(key: TranslationKey): string {
    return translations[key] || key;
}
        ''')
        
        # React –ø—Ä–∏–∫–ª–∞–¥
        self.stdout.write('‚öõÔ∏è React Hook:')
        self.stdout.write('''
// hooks/useTranslations.ts
import { useState, useEffect } from 'react';
import type { Translations } from '../translations';

export function useTranslations(lang = 'uk') {
    const [translations, setTranslations] = useState<Translations>({} as Translations);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetch(`/translations/${lang}.json`)
            .then(res => res.json())
            .then(data => {
                setTranslations(data);
                setLoading(false);
            });
    }, [lang]);

    const t = (key: keyof Translations) => translations[key] || key;

    return { t, loading, translations };
}
        ''')
        
        # Vue –ø—Ä–∏–∫–ª–∞–¥
        self.stdout.write('üçÉ Vue Composable:')
        self.stdout.write('''
// composables/useTranslations.ts
import { ref, computed } from 'vue';

const translations = ref({});
const currentLang = ref('uk');

export function useTranslations() {
    const loadTranslations = async (lang: string) => {
        const response = await fetch(`/translations/${lang}.json`);
        translations.value = await response.json();
        currentLang.value = lang;
    };

    const t = (key: string) => translations.value[key] || key;

    return {
        t,
        loadTranslations,
        currentLang: computed(() => currentLang.value)
    };
}
        ''')
        
        self.stdout.write(f'üìÅ –§–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤: {output_dir}')
        self.stdout.write('üåê –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ñ–∞–π–ª–∏ –≤ –ø—É–±–ª—ñ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é')