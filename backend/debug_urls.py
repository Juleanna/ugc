# debug_urls.py
# –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó backend: python debug_urls.py

import sys
import os
import django
from pathlib import Path

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Django
sys.path.insert(0, str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ugc_backend.settings')

try:
    django.setup()
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Django: {e}")
    sys.exit(1)

def check_translations_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª translations.py"""
    translations_file = Path("apps/api/translations.py")
    
    if translations_file.exists():
        print(f"‚úÖ –§–∞–π–ª —ñ—Å–Ω—É—î: {translations_file}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
        try:
            from apps.api.translations import TranslationsAPIView
            print("‚úÖ TranslationsAPIView —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ")
            return True
        except ImportError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ: {e}")
            return False
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {translations_file}")
        return False

def check_urls_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é URL-—ñ–≤"""
    try:
        from django.urls import reverse
        from django.conf import settings
        
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ URL-–∏
        try:
            from django.core.urlresolvers import get_resolver
        except ImportError:
            from django.urls import get_resolver
        
        resolver = get_resolver()
        
        # –®—É–∫–∞—î–º–æ URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        translation_patterns = []
        
        def find_translation_urls(url_patterns, prefix=''):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —à—É–∫–∞—î URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
            for pattern in url_patterns:
                if hasattr(pattern, 'pattern'):
                    full_pattern = prefix + str(pattern.pattern)
                    if 'translation' in full_pattern:
                        translation_patterns.append(full_pattern)
                
                if hasattr(pattern, 'url_patterns'):
                    find_translation_urls(pattern.url_patterns, prefix + str(pattern.pattern))
        
        find_translation_urls(resolver.url_patterns)
        
        if translation_patterns:
            print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:")
            for pattern in translation_patterns:
                print(f"   üìç {pattern}")
        else:
            print("‚ùå URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        return len(translation_patterns) > 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ URL-—ñ–≤: {e}")
        return False

def check_api_root():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î API root"""
    try:
        import requests
        
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API root...")
        
        response = requests.get("http://127.0.0.1:8000/api/v1/", timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API root –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
            translation_urls = [url for url in data.keys() if 'translation' in url.lower()]
            
            if translation_urls:
                print("‚úÖ URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ API root:")
                for url in translation_urls:
                    print(f"   üìç {url}: {data[url]}")
            else:
                print("‚ùå URL-–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ API root")
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ñ URL-–∏:")
                for key, value in data.items():
                    print(f"   üìç {key}: {value}")
            
            return len(translation_urls) > 0
        else:
            print(f"‚ùå API root –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ –≤–¥–∞—î—Ç—å—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        print("   –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ:")
        print("   python manage.py runserver")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API root: {e}")
        return False

def test_translation_endpoint():
    """–¢–µ—Å—Ç—É—î –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    try:
        import requests
        
        print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
        
        test_url = "http://127.0.0.1:8000/api/v1/translations/uk/"
        
        response = requests.get(test_url, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ï–Ω–¥–ø–æ—ñ–Ω—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –ø—Ä–∞—Ü—é—î!")
            print(f"   –ú–æ–≤–∞: {data.get('language')}")
            print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: {data.get('count', 0)}")
            return True
        else:
            print(f"‚ùå –ï–Ω–¥–ø–æ—ñ–Ω—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–µ –ø—Ä–∞—Ü—é—î: {response.status_code}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É: {e}")
        return False

def check_file_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—ñ–≤"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤...")
    
    files_to_check = [
        "apps/api/__init__.py",
        "apps/api/urls.py", 
        "apps/api/views.py",
        "apps/api/translations.py",
        "static_translations/uk.json",
        "static_translations/en.json"
    ]
    
    all_exist = True
    
    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            all_exist = False
    
    return all_exist

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ò –ü–ï–†–ï–ö–õ–ê–î–Ü–í")
    print("="*50)
    
    results = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
    print("1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤...")
    results.append(check_file_structure())
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ translations.py
    print("\n2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É translations.py...")
    results.append(check_translations_file())
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    print("\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    results.append(check_urls_config())
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API root
    print("\n4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API root...")
    results.append(check_api_root())
    
    # –¢–µ—Å—Ç—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç
    print("\n5. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É...")
    results.append(test_translation_endpoint())
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò")
    
    passed = sum(results)
    total = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        
        if not results[0]:
            print("üìÅ –°—Ç–≤–æ—Ä—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏:")
            print("   python quick_setup_translations.py")
        
        if not results[1]:
            print("üìÑ –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª translations.py –≤ apps/api/")
        
        if not results[2]:
            print("üîó –û–Ω–æ–≤—ñ—Ç—å —Ñ–∞–π–ª apps/api/urls.py")
        
        if not results[3] or not results[4]:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä:")
            print("   python manage.py runserver")

if __name__ == "__main__":
    main()