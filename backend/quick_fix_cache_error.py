# quick_fix_cache_error.py
# –®–≤–∏–¥–∫–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è JsonResponse
# –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó backend: python quick_fix_cache_error.py

from pathlib import Path
import shutil

def fix_translations_file():
    """–í–∏–ø—Ä–∞–≤–ª—è—î —Ñ–∞–π–ª translations.py"""
    backend_dir = Path(__file__).parent
    translations_file = backend_dir / "apps" / "api" / "translations.py"
    
    if not translations_file.exists():
        print(f"‚ùå –§–∞–π–ª {translations_file} –Ω–µ —ñ—Å–Ω—É—î")
        print("   –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ—é:")
        print("   python fix_translations_urls.py")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
    backup_file = translations_file.with_suffix('.py.backup')
    shutil.copy(translations_file, backup_file)
    print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {backup_file}")
    
    # –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–º—ñ—Å—Ç
    with open(translations_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @cache_page
    if '@cache_page' in content:
        lines = content.split('\n')
        new_lines = []
        skip_next = False
        
        for line in lines:
            if '@method_decorator(cache_page' in line:
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫ —ñ –Ω–∞—Å—Ç—É–ø–Ω–∏–π
                skip_next = True
                continue
            elif skip_next and line.strip().startswith('def get('):
                # –¶–µ —Ä—è–¥–æ–∫ –∑ def get, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                skip_next = False
                new_lines.append(line)
            elif skip_next:
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫ (—á–∞—Å—Ç–∏–Ω–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞)
                continue
            else:
                new_lines.append(line)
        
        content = '\n'.join(new_lines)
        print("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @cache_page")
    
    # –í–∏–¥–∞–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç cache_page —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
    if 'from django.views.decorators.cache import cache_page' in content and '@cache_page' not in content:
        content = content.replace('from django.views.decorators.cache import cache_page\n', '')
        content = content.replace(', cache_page', '')
        print("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏–π —ñ–º–ø–æ—Ä—Ç cache_page")
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    with open(translations_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª: {translations_file}")
    return True

def create_simple_translations_file():
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π —Ñ–∞–π–ª translations.py –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–µ—à—É–≤–∞–Ω–Ω—è"""
    backend_dir = Path(__file__).parent
    translations_file = backend_dir / "apps" / "api" / "translations.py"
    
    # –ü—Ä–æ—Å—Ç–∏–π –∫–æ–¥ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
    simple_code = '''# backend/apps/api/translations.py
import json
from django.http import JsonResponse
from django.views import View
from django.conf import settings
from django.core.cache import cache
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import logging

logger = logging.getLogger(__name__)

class TranslationsAPIView(View):
    """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    
    def get(self, request, lang='uk'):
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–æ–≤–∏
            available_languages = [code for code, name in settings.LANGUAGES]
            if lang not in available_languages:
                lang = settings.LANGUAGE_CODE
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ (–±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–µ—à—É–≤–∞–Ω–Ω—è JsonResponse)
            translations = self.load_static_translations(lang)
            
            return JsonResponse({
                'language': lang,
                'translations': translations,
                'count': len(translations),
                'source': 'static',
                'available_languages': available_languages
            })
            
        except Exception as e:
            logger.error(f"Error loading translations for {lang}: {str(e)}")
            return JsonResponse({
                'error': str(e),
                'language': lang,
                'translations': {},
                'count': 0
            }, status=500)
    
    def load_static_translations(self, lang):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏"""
        static_dir = getattr(settings, 'STATIC_TRANSLATIONS_DIR', settings.BASE_DIR / 'static_translations')
        file_path = static_dir / f'{lang}.json'
        
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return self.get_default_translations(lang)
        else:
            return self.get_default_translations(lang)
    
    def get_default_translations(self, lang):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏"""
        if lang == 'uk':
            return {
                "nav.home": "–ì–æ–ª–æ–≤–Ω–∞",
                "nav.about": "–ü—Ä–æ –Ω–∞—Å",
                "nav.services": "–ü–æ—Å–ª—É–≥–∏",
                "nav.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
                "common.loading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
                "common.error": "–ü–æ–º–∏–ª–∫–∞",
                "common.success": "–£—Å–ø—ñ—Ö",
                "form.name": "–Ü–º'—è",
                "form.email": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞"
            }
        else:
            return {
                "nav.home": "Home",
                "nav.about": "About",
                "nav.services": "Services",
                "nav.contact": "Contact",
                "common.loading": "Loading...",
                "common.error": "Error",
                "common.success": "Success",
                "form.name": "Name",
                "form.email": "Email"
            }

class DynamicTranslationsAPIView(View):
    """API –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    
    def get(self, request, lang='uk'):
        try:
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—ñ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
            return JsonResponse({
                'language': lang,
                'translations': {},
                'count': 0,
                'source': 'dynamic'
            })
        except Exception as e:
            return JsonResponse({
                'error': str(e),
                'language': lang,
                'translations': {},
                'count': 0
            }, status=500)

class AllTranslationsAPIView(View):
    """API –¥–ª—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    
    def get(self, request, lang='uk'):
        try:
            static_view = TranslationsAPIView()
            static_response = static_view.get(request, lang)
            
            if static_response.status_code != 200:
                return static_response
            
            static_data = json.loads(static_response.content)
            
            return JsonResponse({
                'language': lang,
                'translations': static_data.get('translations', {}),
                'count': static_data.get('count', 0),
                'static_count': static_data.get('count', 0),
                'dynamic_count': 0,
                'source': 'combined',
                'available_languages': static_data.get('available_languages', [])
            })
        except Exception as e:
            return JsonResponse({
                'error': str(e),
                'language': lang,
                'translations': {},
                'count': 0
            }, status=500)

class TranslationSearchView(View):
    """–ü–æ—à—É–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    
    def get(self, request, lang='uk'):
        try:
            query = request.GET.get('q', '').strip()
            
            if not query:
                return JsonResponse({
                    'error': 'Query parameter "q" is required'
                }, status=400)
            
            static_view = TranslationsAPIView()
            static_response = static_view.get(request, lang)
            
            if static_response.status_code != 200:
                return static_response
            
            static_data = json.loads(static_response.content)
            translations = static_data.get('translations', {})
            
            results = {}
            query_lower = query.lower()
            
            for key, value in translations.items():
                if (query_lower in key.lower() or 
                    query_lower in str(value).lower()):
                    results[key] = value
            
            return JsonResponse({
                'query': query,
                'language': lang,
                'results': results,
                'count': len(results)
            })
            
        except Exception as e:
            return JsonResponse({
                'error': str(e)
            }, status=500)

class TranslationKeysView(View):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—é—á—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    
    def get(self, request, lang='uk'):
        try:
            static_view = TranslationsAPIView()
            static_response = static_view.get(request, lang)
            
            if static_response.status_code != 200:
                return static_response
            
            static_data = json.loads(static_response.content)
            translations = static_data.get('translations', {})
            all_keys = list(translations.keys())
            
            return JsonResponse({
                'language': lang,
                'keys': all_keys,
                'total_count': len(all_keys)
            })
            
        except Exception as e:
            return JsonResponse({
                'error': str(e)
            }, status=500)

class TranslationStatsView(View):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    
    def get(self, request):
        try:
            stats = {}
            
            for lang_code, lang_name in settings.LANGUAGES:
                static_view = TranslationsAPIView()
                static_response = static_view.get(request, lang_code)
                
                static_count = 0
                if static_response.status_code == 200:
                    static_data = json.loads(static_response.content)
                    static_count = static_data.get('count', 0)
                
                stats[lang_code] = {
                    'name': lang_name,
                    'static_count': static_count,
                    'dynamic_count': 0,
                    'total_count': static_count
                }
            
            return JsonResponse({
                'languages': stats,
                'total_languages': len(stats)
            })
            
        except Exception as e:
            return JsonResponse({
                'error': str(e)
            }, status=500)

@method_decorator(csrf_exempt, name='dispatch')
class TranslationUpdateWebhook(View):
    """Webhook –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É"""
    
    def post(self, request):
        try:
            return JsonResponse({
                'status': 'success', 
                'message': 'Translation cache cleared successfully'
            })
        except Exception as e:
            return JsonResponse({
                'status': 'error', 
                'message': str(e)
            }, status=500)
'''
    
    with open(translations_file, 'w', encoding='utf-8') as f:
        f.write(simple_code)
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Å—Ç–∏–π —Ñ–∞–π–ª: {translations_file}")

def create_translation_files():
    """–°—Ç–≤–æ—Ä—é—î JSON —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    backend_dir = Path(__file__).parent
    static_dir = backend_dir / "static_translations"
    static_dir.mkdir(exist_ok=True)
    
    uk_translations = {
        "nav.home": "–ì–æ–ª–æ–≤–Ω–∞",
        "nav.about": "–ü—Ä–æ –Ω–∞—Å",
        "nav.services": "–ü–æ—Å–ª—É–≥–∏",
        "nav.contact": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
        "common.loading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
        "common.error": "–ü–æ–º–∏–ª–∫–∞",
        "common.success": "–£—Å–ø—ñ—Ö",
        "form.name": "–Ü–º'—è",
        "form.email": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞"
    }
    
    en_translations = {
        "nav.home": "Home",
        "nav.about": "About",
        "nav.services": "Services",
        "nav.contact": "Contact",
        "common.loading": "Loading...",
        "common.error": "Error",
        "common.success": "Success",
        "form.name": "Name",
        "form.email": "Email"
    }
    
    import json
    
    for lang, translations in [("uk", uk_translations), ("en", en_translations)]:
        file_path = static_dir / f"{lang}.json"
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(translations, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {file_path}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print("üîß –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–ú–ò–õ–ö–ò –ö–ï–®–£–í–ê–ù–ù–Ø")
    print("="*50)
    
    translations_file = Path("apps/api/translations.py")
    
    if translations_file.exists():
        print("1. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É...")
        success = fix_translations_file()
        
        if not success:
            print("2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É...")
            create_simple_translations_file()
    else:
        print("1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É translations.py...")
        create_simple_translations_file()
    
    print("\n2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
    create_translation_files()
    
    print("\n" + "="*50)
    print("‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\n–ü–æ–º–∏–ª–∫–∞ –±—É–ª–∞ —á–µ—Ä–µ–∑ —Ç–µ, —â–æ Django –Ω–∞–º–∞–≥–∞–≤—Å—è –∫–µ—à—É–≤–∞—Ç–∏ JsonResponse,")
    print("—â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤ JSON.")
    print("\n–¢–µ–ø–µ—Ä:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
    print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ: http://127.0.0.1:8000/api/v1/translations/uk/")
    print("3. –¢–µ—Å—Ç—É–π—Ç–µ: http://127.0.0.1:8000/api/v1/translations/stats/")
    
    print("\nüí° –Ø–∫—â–æ –≤—Å–µ —â–µ —î –ø–æ–º–∏–ª–∫–∏:")
    print("1. –û—á–∏—Å—Ç—ñ—Ç—å –∫–µ—à: python manage.py shell -c \"from django.core.cache import cache; cache.clear()\"")
    print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Redis/–∫–µ—à—É –≤ settings.py")

if __name__ == "__main__":
    main()