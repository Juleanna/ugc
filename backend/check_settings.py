# backend/check_settings.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Django –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
"""
import os
import sys
import django
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ugc_backend.settings')

def check_settings():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        django.setup()
        from django.conf import settings
        
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Django...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        checks = [
            ("SECRET_KEY", hasattr(settings, 'SECRET_KEY') and settings.SECRET_KEY),
            ("DEBUG", hasattr(settings, 'DEBUG')),
            ("DATABASES", hasattr(settings, 'DATABASES') and settings.DATABASES),
            ("INSTALLED_APPS", hasattr(settings, 'INSTALLED_APPS') and len(settings.INSTALLED_APPS) > 0),
            ("LANGUAGES", hasattr(settings, 'LANGUAGES') and len(settings.LANGUAGES) > 0),
            ("CACHES", hasattr(settings, 'CACHES') and settings.CACHES),
            ("REST_FRAMEWORK", hasattr(settings, 'REST_FRAMEWORK')),
        ]
        
        all_passed = True
        for name, passed in checks:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {name}")
            if not passed:
                all_passed = False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        print("\nüåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
        translation_checks = [
            ("MODELTRANSLATION_LANGUAGES", hasattr(settings, 'MODELTRANSLATION_LANGUAGES')),
            ("STATIC_TRANSLATIONS_DIR", hasattr(settings, 'STATIC_TRANSLATIONS_DIR')),
            ("TRANSLATION_CACHE_SETTINGS", hasattr(settings, 'TRANSLATION_CACHE_SETTINGS')),
            ("TRANSLATION_EXPORT_SETTINGS", hasattr(settings, 'TRANSLATION_EXPORT_SETTINGS')),
        ]
        
        for name, passed in translation_checks:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {name}")
            if not passed:
                all_passed = False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
        
        required_dirs = []
        if hasattr(settings, 'STATIC_TRANSLATIONS_DIR'):
            required_dirs.append(("STATIC_TRANSLATIONS_DIR", settings.STATIC_TRANSLATIONS_DIR))
        if hasattr(settings, 'FRONTEND_TRANSLATIONS_DIR'):
            required_dirs.append(("FRONTEND_TRANSLATIONS_DIR", settings.FRONTEND_TRANSLATIONS_DIR))
        
        for name, path in required_dirs:
            exists = path.exists() if hasattr(path, 'exists') else os.path.exists(path)
            status = "‚úÖ" if exists else "‚ùå"
            print(f"{status} {name}: {path}")
            if not exists:
                try:
                    os.makedirs(path, exist_ok=True)
                    print(f"   üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {path}")
                except Exception as e:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {e}")
                    all_passed = False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Redis (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
        print("\nüîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Redis...")
        try:
            from django.core.cache import cache
            cache.set('test_key', 'test_value', 10)
            retrieved = cache.get('test_key')
            if retrieved == 'test_value':
                print("‚úÖ Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
                cache.delete('test_key')
            else:
                print("‚ùå Redis –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î")
                print("   üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π")
                # –ù–µ —Ä–æ–±–∏–º–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é
        except Exception as e:
            print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            print("   üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π")
            print("   üí° –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DummyCache –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏")
            # –ù–µ —Ä–æ–±–∏–º–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ–π
        print("\nüóÑÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ–π...")
        try:
            from django.core.management import execute_from_command_line
            from io import StringIO
            import sys
            
            # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –≤–∏–≤—ñ–¥
            old_stdout = sys.stdout
            sys.stdout = captured_output = StringIO()
            
            try:
                execute_from_command_line(['manage.py', 'showmigrations', '--plan'])
                output = captured_output.getvalue()
                
                if '[X]' in output:
                    print("‚úÖ –Ñ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –º—ñ–≥—Ä–∞—Ü—ñ—ó")
                else:
                    print("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏—Ö –º—ñ–≥—Ä–∞—Ü—ñ–π")
                    print("   üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python manage.py migrate")
                    
            finally:
                sys.stdout = old_stdout
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ–π: {e}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        print("\nüìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
            translation_system_works = False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
            required_files = [
                "apps/api/utils/translations.py",
                "apps/api/views/translations.py", 
                "apps/api/management/commands/setup_translations.py",
            ]
            
            missing_files = []
            for file_path in required_files:
                full_path = Path(file_path)
                if not full_path.exists():
                    missing_files.append(file_path)
            
            if missing_files:
                print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:")
                for file_path in missing_files:
                    print(f"   üìÑ {file_path}")
                print("   üí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤")
            else:
                print("‚úÖ –§–∞–π–ª–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
                
                # –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
                try:
                    from apps.api.utils.translations import TranslationUtils
                    print("‚úÖ TranslationUtils —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
                    translation_system_works = True
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É TranslationUtils: {e}")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: {e}")
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*50)
        if all_passed:
            print("üéâ –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
            print("üí° –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏: python manage.py runserver")
        else:
            print("‚ö†Ô∏è –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏")
            print("üí° –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞")
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        print("–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:")
        traceback.print_exc()
        return False

def check_translation_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤"""
    try:
        from django.conf import settings
        
        print("\nüìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
        
        if hasattr(settings, 'STATIC_TRANSLATIONS_DIR'):
            trans_dir = settings.STATIC_TRANSLATIONS_DIR
            
            for lang_code, lang_name in settings.LANGUAGES:
                file_path = trans_dir / f'{lang_code}.json'
                exists = file_path.exists()
                status = "‚úÖ" if exists else "‚ùå"
                print(f"{status} {lang_name} ({lang_code}): {file_path}")
                
                if not exists:
                    print(f"   üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python manage.py setup_translations")
                    return False
                    
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å UGC Backend...")
    print("="*50)
    
    settings_ok = check_settings()
    translations_ok = check_translation_files()
    
    if settings_ok and translations_ok:
        print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        sys.exit(0)
    else:
        print("\n‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏")
        sys.exit(1)