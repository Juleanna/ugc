// frontend/src/services/apiService.js
// –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –≤—Å—ñ—Ö API –≤–∏–∫–ª–∏–∫—ñ–≤

class APIService {
  constructor() {
    this.baseURL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000/api/v1';
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
    this.requestQueue = new Map(); // –î–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é –∑–∞–ø–∏—Ç—ñ–≤
  }

  // –ë–∞–∑–æ–≤–∏–π API –≤–∏–∫–ª–∏–∫ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º —Ç–∞ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—î—é
  async apiCall(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const cacheKey = `${endpoint}_${JSON.stringify(options)}`;
    
    console.log(`üì° API Request: ${endpoint}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç–∞–∫–∏–π –∑–∞–ø–∏—Ç
    if (this.requestQueue.has(cacheKey)) {
      console.log(`‚è≥ Waiting for existing request: ${endpoint}`);
      return this.requestQueue.get(cacheKey);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log(`üéØ Cache hit: ${endpoint}`);
        return cached.data;
      } else {
        this.cache.delete(cacheKey);
      }
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ Promise –¥–ª—è –∑–∞–ø–∏—Ç—É
    const requestPromise = this.executeRequest(url, options);
    this.requestQueue.set(cacheKey, requestPromise);

    try {
      const result = await requestPromise;
      
      // –ö–µ—à—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });
      
      console.log(`‚úÖ API Success: ${endpoint}`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå API Error ${endpoint}:`, error);
      throw error;
    } finally {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ —á–µ—Ä–≥–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      this.requestQueue.delete(cacheKey);
    }
  }

  // –í–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—É
  async executeRequest(url, options = {}) {
    const config = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      ...options
    };

    const response = await fetch(url, config);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    if (result.success) {
      return result.data;
    } else if (result.results) {
      return result.results;
    } else if (Array.isArray(result)) {
      return result;
    } else {
      return result;
    }
  }

  // –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
  clearCache(pattern = null) {
    if (pattern) {
      for (const key of this.cache.keys()) {
        if (key.includes(pattern)) {
          this.cache.delete(key);
        }
      }
    } else {
      this.cache.clear();
    }
    console.log('üßπ Cache cleared');
  }

  // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  async forceRefresh(endpoint, options = {}) {
    const cacheKey = `${endpoint}_${JSON.stringify(options)}`;
    this.cache.delete(cacheKey);
    return this.apiCall(endpoint, options);
  }

  // ==================== –°–ü–ï–¶–ò–§–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò ====================

  // Homepage –¥–∞–Ω—ñ
  async getHomepageData() {
    return this.apiCall('/homepage/');
  }

  // Hero –¥–∞–Ω—ñ –∑ fallback
  async getHeroData() {
    try {
      return await this.apiCall('/homepage/hero_data/');
    } catch (error) {
      console.warn('Hero endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ homepage –¥–∞–Ω—ñ');
      const homepageData = await this.getHomepageData();
      return {
        main_title: homepageData?.main_title || '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –æ–¥—è–≥',
        sphere_title: homepageData?.sphere_title || '–∫–æ–∂–Ω–æ—ó —Å—Ñ–µ—Ä–∏',
        subtitle: homepageData?.subtitle || '',
        primary_button_text: homepageData?.primary_button_text || '–ù–∞—à—ñ –ø—Ä–æ—î–∫—Ç–∏',
        secondary_button_text: homepageData?.secondary_button_text || '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ',
        stats: homepageData?.stats || {},
        featured_services: homepageData?.featured_services || []
      };
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ fallback
  async getStats() {
    try {
      return await this.apiCall('/homepage/stats/');
    } catch (error) {
      console.warn('Stats endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback');
      return {
        experience: '5+',
        projects: '100+',
        clients: '50+',
        support: '24/7'
      };
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏
  async getFeaturedServices() {
    try {
      return await this.apiCall('/services/featured/');
    } catch (error) {
      console.warn('Featured services –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π endpoint');
      try {
        const allServices = await this.apiCall('/services/');
        return Array.isArray(allServices) ? allServices.slice(0, 6) : [];
      } catch (secondError) {
        console.error('–í—Å—ñ services endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
        return [];
      }
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏
  async getFeaturedProjects() {
    try {
      return await this.apiCall('/projects/featured/');
    } catch (error) {
      console.warn('Featured projects –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π endpoint');
      try {
        const allProjects = await this.apiCall('/projects/');
        return Array.isArray(allProjects) ? allProjects.slice(0, 6) : [];
      } catch (secondError) {
        console.error('–í—Å—ñ projects endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
        return [];
      }
    }
  }

  // –ü–µ—Ä–µ–∫–ª–∞–¥–∏
  async getTranslations(lang = 'uk') {
    try {
      return await this.apiCall(`/translations/${lang}/all/`);
    } catch (error) {
      console.warn(`Translations –¥–ª—è ${lang} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ`);
      return {};
    }
  }

  // –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è Homepage
  async loadHomepageBundle() {
    try {
      console.log('üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Homepage bundle...');
      
      // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
      const [
        heroDataResult,
        statsResult, 
        servicesResult,
        projectsResult
      ] = await Promise.allSettled([
        this.getHeroData(),
        this.getStats(),
        this.getFeaturedServices(),
        this.getFeaturedProjects()
      ]);

      const bundle = {
        hero: heroDataResult.status === 'fulfilled' ? heroDataResult.value : null,
        stats: statsResult.status === 'fulfilled' ? statsResult.value : null,
        services: servicesResult.status === 'fulfilled' ? servicesResult.value : [],
        projects: projectsResult.status === 'fulfilled' ? projectsResult.value : [],
        hasErrors: [heroDataResult, statsResult, servicesResult, projectsResult]
          .some(result => result.status === 'rejected')
      };

      console.log('‚úÖ Homepage bundle –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
        hero: !!bundle.hero,
        stats: !!bundle.stats,
        services: bundle.services.length,
        projects: bundle.projects.length,
        hasErrors: bundle.hasErrors
      });

      return bundle;
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Homepage bundle:', error);
      throw error;
    }
  }

  // –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏
  async getServices() {
    return this.apiCall('/services/');
  }

  // –ó–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏
  async getProjects() {
    return this.apiCall('/projects/');
  }

  // –û—Ñ—ñ—Å–∏
  async getOffices() {
    return this.apiCall('/offices/');
  }

  // About –¥–∞–Ω—ñ
  async getAboutData() {
    return this.apiCall('/about/');
  }

  // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —Ñ–æ—Ä–º–∞
  async submitContactForm(formData) {
    return this.apiCall('/contact-inquiries/', {
      method: 'POST',
      body: JSON.stringify(formData)
    });
  }

  // –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é
  async submitJobApplication(applicationData) {
    return this.apiCall('/job-applications/', {
      method: 'POST',
      body: JSON.stringify(applicationData)
    });
  }

  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∞ –∑–∞—è–≤–∫–∞
  async submitPartnerInquiry(partnerData) {
    return this.apiCall('/partner-inquiries/', {
      method: 'POST',
      body: JSON.stringify(partnerData)
    });
  }

  // ==================== –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –ú–ï–¢–û–î–ò ====================

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
  async checkAPIHealth() {
    try {
      await this.apiCall('/');
      return { status: 'healthy', timestamp: new Date().toISOString() };
    } catch (error) {
      return { 
        status: 'unhealthy', 
        error: error.message, 
        timestamp: new Date().toISOString() 
      };
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
  getCacheStats() {
    return {
      entries: this.cache.size,
      keys: Array.from(this.cache.keys()),
      activeRequests: this.requestQueue.size
    };
  }

  // –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  async preloadCriticalData() {
    const criticalEndpoints = [
      '/homepage/',
      '/services/featured/',
      '/translations/uk/all/'
    ];

    console.log('üîÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö...');
    
    const results = await Promise.allSettled(
      criticalEndpoints.map(endpoint => this.apiCall(endpoint))
    );

    const successful = results.filter(r => r.status === 'fulfilled').length;
    console.log(`‚úÖ –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${successful}/${criticalEndpoints.length} –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö endpoints`);
    
    return {
      total: criticalEndpoints.length,
      successful,
      failed: criticalEndpoints.length - successful
    };
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ singleton instance
const apiService = new APIService();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —è–∫ default —Ç–∞ named exports
export default apiService;
export { APIService };

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≥–æ—Ç–æ–≤—ñ —Ö—É–∫–∏ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
export const useAPIService = () => apiService;