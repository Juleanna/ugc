// frontend/src/services/translationService.js
class TranslationService {
  constructor() {
    this.baseURL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000/api/v1';
    this.currentLanguage = 'uk';
    this.translations = new Map();
    this.listeners = new Set();
    this.cache = new Map();
    this.cacheTimeout = 30 * 60 * 1000; // 30 —Ö–≤–∏–ª–∏–Ω
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    this.init();
  }

  async init() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∑ localStorage –∞–±–æ –±—Ä–∞—É–∑–µ—Ä–∞
    this.currentLanguage = this.getStoredLanguage() || this.getBrowserLanguage() || 'uk';
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    await this.loadTranslations(this.currentLanguage);
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—É –º–æ–≤—É –∑ localStorage
   */
  getStoredLanguage() {
    try {
      return localStorage.getItem('app_language');
    } catch (e) {
      return null;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –º–æ–≤—É –±—Ä–∞—É–∑–µ—Ä–∞
   */
  getBrowserLanguage() {
    const lang = navigator.language || navigator.userLanguage;
    if (lang.startsWith('uk')) return 'uk';
    if (lang.startsWith('en')) return 'en';
    return 'uk';
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î –º–æ–≤—É –≤ localStorage
   */
  storeLanguage(lang) {
    try {
      localStorage.setItem('app_language', lang);
    } catch (e) {
      console.warn('Cannot save language to localStorage:', e);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ API
   */
  async loadTranslations(lang, type = 'all') {
    const cacheKey = `${lang}_${type}`;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        this.translations.set(lang, cached.data);
        return cached.data;
      }
    }

    try {
      let endpoint;
      switch (type) {
        case 'static':
          endpoint = `/translations/${lang}/`;
          break;
        case 'dynamic':
          endpoint = `/translations/${lang}/dynamic/`;
          break;
        case 'all':
        default:
          endpoint = `/translations/${lang}/all/`;
          break;
      }

      const response = await fetch(`${this.baseURL}${endpoint}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const translations = data.translations || {};

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      this.cache.set(cacheKey, {
        data: translations,
        timestamp: Date.now()
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
      this.translations.set(lang, translations);

      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(translations).length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${lang}`);
      return translations;

    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${lang}:`, error);
      
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      const fallbackTranslations = this.getFallbackTranslations(lang);
      this.translations.set(lang, fallbackTranslations);
      return fallbackTranslations;
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   */
  getFallbackTranslations(lang) {
    if (lang === 'uk') {
      return {
        'nav.home': '–ì–æ–ª–æ–≤–Ω–∞',
        'nav.about': '–ü—Ä–æ –Ω–∞—Å',
        'nav.services': '–ü–æ—Å–ª—É–≥–∏',
        'nav.contact': '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
        'common.loading': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
        'common.error': '–ü–æ–º–∏–ª–∫–∞',
        'common.success': '–£—Å–ø—ñ—Ö'
      };
    } else {
      return {
        'nav.home': 'Home',
        'nav.about': 'About',
        'nav.services': 'Services',
        'nav.contact': 'Contact',
        'common.loading': 'Loading...',
        'common.error': 'Error',
        'common.success': 'Success'
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –∫–ª—é—á–µ–º
   */
  t(key, params = {}) {
    const lang = this.currentLanguage;
    const translations = this.translations.get(lang) || {};
    
    let translation = translations[key];
    
    // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ
    if (!translation && lang !== 'en') {
      const enTranslations = this.translations.get('en') || {};
      translation = enTranslations[key];
    }
    
    // –Ø–∫—â–æ —ñ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á
    if (!translation) {
      translation = key;
      console.warn(`üîç –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${key}`);
    }

    // –ó–∞–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ
    return this.interpolate(translation, params);
  }

  /**
   * –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤ –ø–µ—Ä–µ–∫–ª–∞–¥
   */
  interpolate(text, params) {
    return text.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      return params[key] !== undefined ? params[key] : match;
    });
  }

  /**
   * –ó–º—ñ–Ω—é—î –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É
   */
  async setLanguage(lang) {
    if (this.currentLanguage === lang) return;

    this.currentLanguage = lang;
    this.storeLanguage(lang);

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –Ω–æ–≤–æ—ó –º–æ–≤–∏
    await this.loadTranslations(lang);

    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É –º–æ–≤–∏
    this.notifyListeners();
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É
   */
  getCurrentLanguage() {
    return this.currentLanguage;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤
   */
  async getAvailableLanguages() {
    try {
      const response = await fetch(`${this.baseURL}/translations/stats/`);
      const data = await response.json();
      return Object.keys(data.languages || {});
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–≤:', error);
      return ['uk', 'en'];
    }
  }

  /**
   * –ü–æ—à—É–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  async searchTranslations(query, lang = null) {
    const searchLang = lang || this.currentLanguage;
    
    try {
      const response = await fetch(
        `${this.baseURL}/translations/${searchLang}/search/?q=${encodeURIComponent(query)}`
      );
      const data = await response.json();
      return data.results || {};
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', error);
      return {};
    }
  }

  /**
   * –û—á–∏—â–∞—î –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ –ö–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ—á–∏—â–µ–Ω–æ');
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async refreshTranslations() {
    this.clearCache();
    await this.loadTranslations(this.currentLanguage);
    this.notifyListeners();
  }

  /**
   * –î–æ–¥–∞—î —Å–ª—É—Ö–∞—á–∞ –¥–ª—è –∑–º—ñ–Ω –º–æ–≤–∏
   */
  addLanguageChangeListener(callback) {
    this.listeners.add(callback);
  }

  /**
   * –í–∏–¥–∞–ª—è—î —Å–ª—É—Ö–∞—á–∞
   */
  removeLanguageChangeListener(callback) {
    this.listeners.delete(callback);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª—è—î –≤—Å—ñ—Ö —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω–∏
   */
  notifyListeners() {
    this.listeners.forEach(callback => {
      try {
        callback(this.currentLanguage);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤ —Å–ª—É—Ö–∞—á—ñ –∑–º—ñ–Ω–∏ –º–æ–≤–∏:', error);
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–ª—é—á —î –ø–ª—é—Ä–∞–ª—å–Ω–∏–º
   */
  isPlural(key) {
    return key.includes('_plural') || key.includes('_count');
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –ø–ª—é—Ä–∞–ª—å–Ω—ñ —Ñ–æ—Ä–º–∏
   */
  plural(key, count, params = {}) {
    const lang = this.currentLanguage;
    
    // –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
    if (lang === 'uk') {
      let pluralKey;
      if (count === 1) {
        pluralKey = `${key}_one`;
      } else if (count >= 2 && count <= 4) {
        pluralKey = `${key}_few`;
      } else {
        pluralKey = `${key}_many`;
      }
      
      return this.t(pluralKey, { ...params, count });
    }
    
    // –î–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
    if (lang === 'en') {
      const pluralKey = count === 1 ? `${key}_one` : `${key}_other`;
      return this.t(pluralKey, { ...params, count });
    }
    
    // Fallback
    return this.t(key, { ...params, count });
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É—î –¥–∞—Ç—É –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–æ—é –º–æ–≤–æ—é
   */
  formatDate(date, options = {}) {
    const lang = this.currentLanguage;
    const locale = lang === 'uk' ? 'uk-UA' : 'en-US';
    
    try {
      return new Intl.DateTimeFormat(locale, options).format(new Date(date));
    } catch (error) {
      return date.toString();
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É—î —á–∏—Å–ª–æ –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–æ—é –º–æ–≤–æ—é
   */
  formatNumber(number, options = {}) {
    const lang = this.currentLanguage;
    const locale = lang === 'uk' ? 'uk-UA' : 'en-US';
    
    try {
      return new Intl.NumberFormat(locale, options).format(number);
    } catch (error) {
      return number.toString();
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  async getTranslationStats() {
    try {
      const response = await fetch(`${this.baseURL}/translations/stats/`);
      return await response.json();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
const translationService = new TranslationService();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
export default translationService;

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∑—Ä—É—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
export const t = (key, params) => translationService.t(key, params);
export const setLanguage = (lang) => translationService.setLanguage(lang);
export const getCurrentLanguage = () => translationService.getCurrentLanguage();
export const addLanguageChangeListener = (callback) => translationService.addLanguageChangeListener(callback);
export const removeLanguageChangeListener = (callback) => translationService.removeLanguageChangeListener(callback);