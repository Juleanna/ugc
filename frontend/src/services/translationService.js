// frontend/src/services/translationService.js
class UGCTranslationService {
  constructor() {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Vite environment variables
    this.baseURL = import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000/api/v1';
    this.currentLanguage = 'uk';
    this.translations = new Map();
    this.listeners = new Set();
    this.cache = new Map();
    this.cacheTimeout = 30 * 60 * 1000; // 30 —Ö–≤–∏–ª–∏–Ω
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    this.init();
  }

  async init() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∑ localStorage –∞–±–æ –±—Ä–∞—É–∑–µ—Ä–∞
    this.currentLanguage = this.getStoredLanguage() || this.getBrowserLanguage() || 'uk';
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
    await this.loadTranslations(this.currentLanguage);
  }

  getStoredLanguage() {
    try {
      return localStorage.getItem('ugc_language');
    } catch (e) {
      return null;
    }
  }

  getBrowserLanguage() {
    const lang = navigator.language || navigator.userLanguage;
    if (lang.startsWith('uk')) return 'uk';
    if (lang.startsWith('en')) return 'en';
    return 'uk';
  }

  storeLanguage(lang) {
    try {
      localStorage.setItem('ugc_language', lang);
    } catch (e) {
      console.warn('Cannot save language to localStorage:', e);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ –≤–∞—à–æ–≥–æ Django API
   */
  async loadTranslations(lang, type = 'all') {
    const cacheKey = `${lang}_${type}`;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheTimeout) {
        this.translations.set(lang, cached.data);
        return cached.data;
      }
    }

    try {
      let endpoint;
      switch (type) {
        case 'static':
          endpoint = `/translations/${lang}/`;
          break;
        case 'dynamic':
          endpoint = `/translations/${lang}/dynamic/`;
          break;
        case 'all':
        default:
          endpoint = `/translations/${lang}/all/`;
          break;
      }

      console.log(`üåç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${this.baseURL}${endpoint}`);

      const response = await fetch(`${this.baseURL}${endpoint}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const translations = data.translations || {};

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      this.cache.set(cacheKey, {
        data: translations,
        timestamp: Date.now()
      });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
      this.translations.set(lang, translations);

      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${Object.keys(translations).length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${lang}`);
      return translations;

    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è ${lang}:`, error);
      
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      const fallbackTranslations = this.getFallbackTranslations(lang);
      this.translations.set(lang, fallbackTranslations);
      return fallbackTranslations;
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è UGC –ø—Ä–æ–µ–∫—Ç—É
   */
  getFallbackTranslations(lang) {
    if (lang === 'uk') {
      return {
        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        'nav.home': '–ì–æ–ª–æ–≤–Ω–∞',
        'nav.about': '–ü—Ä–æ –Ω–∞—Å',
        'nav.services': '–ü–æ—Å–ª—É–≥–∏',
        'nav.projects': '–ü—Ä–æ–µ–∫—Ç–∏',
        'nav.contact': '–ö–æ–Ω—Ç–∞–∫—Ç–∏',

        // –°–µ—Ä–≤—ñ—Å–∏
        'services.title': '–ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –æ–¥—è–≥—É',
        'services.subtitle': '–í—ñ–¥ –ø—Ä–æ—î–∫—Ç—É–≤–∞–Ω–Ω—è –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏—Ä–æ–±—É - –º–∏ –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ —è–∫—ñ—Å—Ç—å –Ω–∞ –∫–æ–∂–Ω–æ–º—É –µ—Ç–∞–ø—ñ',
        'services.details': '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ',

        // –ü—Ä–æ–µ–∫—Ç–∏
        'projects.title': '–ù–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏',
        'projects.subtitle': '–£—Å–ø—ñ—à–Ω–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è',
        'projects.badge.success': '–£—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ—î–∫—Ç',

        // –ö–æ–Ω—Ç–∞–∫—Ç–∏
        'contact.title': '–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏',
        'contact.subtitle': '–ø—Ä—è–º–æ –∑–∞—Ä–∞–∑',
        'contact.description': '–ì–æ—Ç–æ–≤—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –±—É–¥—å-—è–∫–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏',

        // –§–æ—Ä–º–∞
        'form.name': '–Ü–º\'—è',
        'form.email': 'Email',
        'form.phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'form.message': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
        'form.send': '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏',
        'form.sending': '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...',

        // –ó–∞–≥–∞–ª—å–Ω—ñ
        'common.loading': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
        'common.error': '–ü–æ–º–∏–ª–∫–∞',
        'common.success': '–£—Å–ø—ñ—Ö',
        'common.close': '–ó–∞–∫—Ä–∏—Ç–∏',
      };
    } else {
      return {
        // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        'nav.home': 'Home',
        'nav.about': 'About',
        'nav.services': 'Services',
        'nav.projects': 'Projects',
        'nav.contact': 'Contact',

        // –°–µ—Ä–≤—ñ—Å–∏
        'services.title': 'Full cycle of professional clothing production',
        'services.subtitle': 'From design to finished product - we ensure quality at every stage',
        'services.details': 'Details',

        // –ü—Ä–æ–µ–∫—Ç–∏
        'projects.title': 'Our Projects',
        'projects.subtitle': 'Successfully implemented solutions',
        'projects.badge.success': 'Successful project',

        // –ö–æ–Ω—Ç–∞–∫—Ç–∏
        'contact.title': 'Contact us',
        'contact.subtitle': 'right now',
        'contact.description': 'Ready to help you with any questions and orders',

        // –§–æ—Ä–º–∞
        'form.name': 'Name',
        'form.email': 'Email',
        'form.phone': 'Phone',
        'form.message': 'Message',
        'form.send': 'Send',
        'form.sending': 'Sending...',

        // –ó–∞–≥–∞–ª—å–Ω—ñ
        'common.loading': 'Loading...',
        'common.error': 'Error',
        'common.success': 'Success',
        'common.close': 'Close',
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –∫–ª—é—á–µ–º
   */
  t(key, params = {}) {
    const lang = this.currentLanguage;
    const translations = this.translations.get(lang) || {};
    
    let translation = translations[key];
    
    // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ
    if (!translation && lang !== 'en') {
      const enTranslations = this.translations.get('en') || {};
      translation = enTranslations[key];
    }
    
    // –Ø–∫—â–æ —ñ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á –∞–±–æ fallback
    if (!translation) {
      const fallback = this.getFallbackTranslations(lang)[key];
      translation = fallback || key;
      
      if (!fallback) {
        console.warn(`üîç –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${key} (${lang})`);
      }
    }

    // –ó–∞–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ
    return this.interpolate(translation, params);
  }

  /**
   * –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
   */
  interpolate(text, params) {
    return text.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      return params[key] !== undefined ? params[key] : match;
    });
  }

  /**
   * –ó–º—ñ–Ω—é—î –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É
   */
  async setLanguage(lang) {
    if (this.currentLanguage === lang) return;

    console.log(`üîÑ –ó–º—ñ–Ω–∞ –º–æ–≤–∏: ${this.currentLanguage} ‚Üí ${lang}`);

    this.currentLanguage = lang;
    this.storeLanguage(lang);

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –Ω–æ–≤–æ—ó –º–æ–≤–∏
    await this.loadTranslations(lang);

    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É –º–æ–≤–∏
    this.notifyListeners();
  }

  getCurrentLanguage() {
    return this.currentLanguage;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤
   */
  async getAvailableLanguages() {
    try {
      const response = await fetch(`${this.baseURL}/translations/stats/`);
      const data = await response.json();
      return Object.keys(data.languages || {});
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–≤:', error);
      return ['uk', 'en'];
    }
  }

  /**
   * –û—á–∏—â–∞—î –∫–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ –ö–µ—à –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –æ—á–∏—â–µ–Ω–æ');
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async refreshTranslations() {
    console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...');
    this.clearCache();
    await this.loadTranslations(this.currentLanguage);
    this.notifyListeners();
  }

  /**
   * –î–æ–¥–∞—î —Å–ª—É—Ö–∞—á–∞ –¥–ª—è –∑–º—ñ–Ω –º–æ–≤–∏
   */
  addLanguageChangeListener(callback) {
    this.listeners.add(callback);
  }

  /**
   * –í–∏–¥–∞–ª—è—î —Å–ª—É—Ö–∞—á–∞
   */
  removeLanguageChangeListener(callback) {
    this.listeners.delete(callback);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª—è—î –≤—Å—ñ—Ö —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω–∏
   */
  notifyListeners() {
    this.listeners.forEach(callback => {
      try {
        callback(this.currentLanguage);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤ —Å–ª—É—Ö–∞—á—ñ –∑–º—ñ–Ω–∏ –º–æ–≤–∏:', error);
      }
    });
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
   */
  async getTranslationStats() {
    try {
      const response = await fetch(`${this.baseURL}/translations/stats/`);
      return await response.json();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Django API (–≤–∏–∫–ª–∏–∫–∞—î webhook –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É)
   */
  async syncWithBackend() {
    try {
      await fetch(`${this.baseURL}/webhooks/translations/update/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
      await this.refreshTranslations();
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ backend –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
    }
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
const ugcTranslationService = new UGCTranslationService();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
export default ugcTranslationService;

// –ó—Ä—É—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const t = (key, params) => ugcTranslationService.t(key, params);
export const setLanguage = (lang) => ugcTranslationService.setLanguage(lang);
export const getCurrentLanguage = () => ugcTranslationService.getCurrentLanguage();
export const addLanguageChangeListener = (callback) => ugcTranslationService.addLanguageChangeListener(callback);
export const removeLanguageChangeListener = (callback) => ugcTranslationService.removeLanguageChangeListener(callback);
export const refreshTranslations = () => ugcTranslationService.refreshTranslations();