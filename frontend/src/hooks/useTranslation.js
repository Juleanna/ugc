// frontend/src/hooks/useTranslation.js
import { useState, useEffect, useCallback } from 'react';
import ugcTranslationService from '../services/translationService';

/**
 * React —Ö—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏ –≤ UGC –ø—Ä–æ–µ–∫—Ç—ñ
 */
export const useTranslation = () => {
  const [currentLanguage, setCurrentLanguage] = useState(ugcTranslationService.getCurrentLanguage());
  const [isLoading, setIsLoading] = useState(true);
  const [isReady, setIsReady] = useState(ugcTranslationService.isTranslationsReady());
  const [error, setError] = useState(null);

  // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
  const t = useCallback((key, params = {}) => {
    // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ —â–µ –Ω–µ –≥–æ—Ç–æ–≤—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á –±–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if (!isReady) {
      return key;
    }
    
    return ugcTranslationService.t(key, params);
  }, [isReady]);

  // –ó–º—ñ–Ω–∞ –º–æ–≤–∏
  const changeLanguage = useCallback(async (lang) => {
    if (lang === currentLanguage) return;

    setIsLoading(true);
    setError(null);

    try {
      await ugcTranslationService.setLanguage(lang);
      setCurrentLanguage(lang);
      console.log(`‚úÖ –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${lang}`);
    } catch (err) {
      setError(err.message);
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏:', err);
    } finally {
      setIsLoading(false);
    }
  }, [currentLanguage]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
  const refreshTranslations = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      await ugcTranslationService.refreshTranslations();
      console.log('‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (err) {
      setError(err.message);
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', err);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ —Å–ª—É—Ö–∞—á –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
  useEffect(() => {
    const checkReadiness = async () => {
      try {
        // –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        await ugcTranslationService.waitForReady();
        setIsReady(true);
        setIsLoading(false);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤:', error);
        setError(error.message);
        setIsLoading(false);
      }
    };

    if (!isReady) {
      checkReadiness();
    }
  }, [isReady]);

  // –°–ª—É—Ö–∞—á –∑–º—ñ–Ω–∏ –º–æ–≤–∏
  useEffect(() => {
    const handleLanguageChange = (newLang) => {
      setCurrentLanguage(newLang);
      console.log(`üîÑ –ú–æ–≤–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ö—É–∫—É: ${newLang}`);
    };

    ugcTranslationService.addLanguageChangeListener(handleLanguageChange);

    return () => {
      ugcTranslationService.removeLanguageChangeListener(handleLanguageChange);
    };
  }, []);

  return {
    // –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    t,
    changeLanguage,
    refreshTranslations,
    
    // –°—Ç–∞–Ω
    currentLanguage,
    isLoading,
    isReady,
    error,
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    clearError: () => setError(null),
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–≤–∏
    isUkrainian: currentLanguage === 'uk',
    isEnglish: currentLanguage === 'en',
  };
};

/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–≤
 */
export const useAvailableLanguages = () => {
  const [languages, setLanguages] = useState(['uk', 'en']);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const loadLanguages = async () => {
      setIsLoading(true);
      try {
        const availableLanguages = await ugcTranslationService.getAvailableLanguages();
        setLanguages(availableLanguages);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–≤:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadLanguages();
  }, []);

  return { languages, isLoading };
};

/**
 * –•—É–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
 */
export const useTranslationStats = () => {
  const [stats, setStats] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const loadStats = useCallback(async () => {
    setIsLoading(true);
    try {
      const translationStats = await ugcTranslationService.getTranslationStats();
      setStats(translationStats);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadStats();
  }, [loadStats]);

  return { stats, isLoading, refreshStats: loadStats };
};

/**
 * –•—É–∫ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≥–æ—Ç–æ–≤–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
 * –ü–æ–∫–∞–∑—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
 */
export const useTranslationWithLoader = () => {
  const translation = useTranslation();
  
  // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ, –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  if (!translation.isReady) {
    return {
      ...translation,
      shouldShowLoader: true,
    };
  }

  return {
    ...translation,
    shouldShowLoader: false,
  };
};

export default useTranslation;