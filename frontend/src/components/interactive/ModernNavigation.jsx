import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@nextui-org/react';
import { Menu, X, Home, Info, Briefcase, FolderOpen, Phone, Globe, ChevronDown } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';

const ModernStickyNavbar = ({ activeSection, scrollToSection }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isLangMenuOpen, setIsLangMenuOpen] = useState(false);
  const { t, currentLanguage, changeLanguage } = useTranslation();
  
  // Ref –¥–ª—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ –º–µ–Ω—é –º–æ–≤–∏
  const langMenuRef = useRef(null);
  const langButtonRef = useRef(null);

  // –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏
  const languages = [
    { code: 'uk', name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
    { code: 'en', name: 'English', flag: 'üá∫üá∏' }
  ];

  // –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
  const navigationItems = [
    { id: 'home', label: 'nav.home', icon: Home },
    { id: 'about', label: 'nav.about', icon: Info },
    { id: 'services', label: 'nav.services', icon: Briefcase },
    { id: 'projects', label: 'nav.projects', icon: FolderOpen },
    { id: 'contact', label: 'nav.contact', icon: Phone },
  ];

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const handleNavClick = (sectionId) => {
    setIsMenuOpen(false);
    if (scrollToSection) {
      scrollToSection(sectionId);
    }
  };

  // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
  const handleLanguageChange = async (langCode) => {
    console.log(`üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ –º–æ–≤—ñ: ${langCode}`);
    
    if (langCode === currentLanguage) {
      console.log(`‚ÑπÔ∏è –ú–æ–≤–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞: ${langCode}`);
      setIsLangMenuOpen(false);
      return;
    }

    try {
      console.log(`üîÑ –ó–º—ñ–Ω–∞ –º–æ–≤–∏: ${currentLanguage} ‚Üí ${langCode}`);
      
      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–µ–Ω—é
      setIsLangMenuOpen(false);
      
      // –ó–º—ñ–Ω—é—î–º–æ –º–æ–≤—É
      await changeLanguage(langCode);
      
      console.log(`‚úÖ –ú–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${langCode}`);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏:', error);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –∑ fallback
  const getTranslation = (key, fallback) => {
    const translation = t(key);
    return translation === key ? fallback : translation;
  };

  // –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const currentLang = languages.find(lang => lang.code === currentLanguage) || languages[0];

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –º–µ–Ω—é
  useEffect(() => {
    const handleClickOutside = (event) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –∫–Ω–æ–ø–∫–∏ —Ç–∞ –º–µ–Ω—é
      if (
        langMenuRef.current && 
        langButtonRef.current &&
        !langMenuRef.current.contains(event.target) && 
        !langButtonRef.current.contains(event.target)
      ) {
        console.log('üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –º–µ–Ω—é –º–æ–≤–∏');
        setIsLangMenuOpen(false);
      }
    };

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–µ–Ω—é –≤—ñ–¥–∫—Ä–∏—Ç–µ
    if (isLangMenuOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => {
        document.removeEventListener('mousedown', handleClickOutside);
      };
    }
  }, [isLangMenuOpen]);

  // –í—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
  useEffect(() => {
    console.log(`üîÑ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞ –≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó: ${currentLanguage}`);
  }, [currentLanguage]);

  return (
    <>
      {/* –õ–∏–ø–∫–µ –º–µ–Ω—é */}
      <div className="fixed top-0 left-0 right-0 z-50 bg-white shadow-lg border-b border-gray-200/30">
        <div className="container mx-auto max-w-7xl px-4">
          <div className="flex items-center justify-between h-20">
            
            {/* –õ–æ–≥–æ—Ç–∏–ø */}
            <div className="flex items-center space-x-3">
              <div className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                UGC
              </div>
              <div className="text-sm font-medium text-gray-600">
                Professional Clothing
              </div>
            </div>

            {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è */}
            <div className="hidden lg:flex items-center space-x-1">
              {navigationItems.map((item) => (
                <button
                  key={item.id}
                  onClick={() => handleNavClick(item.id)}
                  className={`relative px-4 py-2 rounded-xl font-medium transition-all duration-300 group ${
                    activeSection === item.id
                      ? 'text-blue-600 bg-blue-50'
                      : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <item.icon className="w-4 h-4" />
                    <span>{getTranslation(item.label, item.label)}</span>
                  </div>
                  
                  {/* –ê–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                  {activeSection === item.id && (
                    <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-blue-600 rounded-full" />
                  )}
                </button>
              ))}
            </div>

            {/* –ü–µ—Ä–µ–º–∏–∫–∞—á –º–æ–≤–∏ —Ç–∞ –º–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é */}
            <div className="flex items-center space-x-4">
              
              {/* –ü–µ—Ä–µ–º–∏–∫–∞—á –º–æ–≤–∏ (–¥–µ—Å–∫—Ç–æ–ø) */}
              <div className="relative">
                <button
                  ref={langButtonRef}
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log(`üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –º–æ–≤–∏, —Å—Ç–∞–Ω: ${isLangMenuOpen}`);
                    setIsLangMenuOpen(!isLangMenuOpen);
                  }}
                  className="hidden lg:flex items-center space-x-2 px-3 py-2 rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                >
                  <Globe className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">
                    {currentLang.flag} {currentLang.code.toUpperCase()}
                  </span>
                  <ChevronDown className={`w-4 h-4 text-gray-600 transition-transform duration-200 ${
                    isLangMenuOpen ? 'rotate-180' : ''
                  }`} />
                </button>

                {/* –í–∏–ø–∞–¥–∞—é—á–µ –º–µ–Ω—é –º–æ–≤ */}
                {isLangMenuOpen && (
                  <div 
                    ref={langMenuRef}
                    className="absolute right-0 top-full mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-[100] animate-in fade-in duration-200"
                  >
                    {languages.map((language) => (
                      <button
                        key={language.code}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleLanguageChange(language.code);
                        }}
                        className={`w-full text-left px-4 py-3 text-sm hover:bg-gray-50 transition-colors duration-150 focus:outline-none focus:bg-gray-50 ${
                          currentLanguage === language.code 
                            ? 'text-blue-600 bg-blue-50 font-medium' 
                            : 'text-gray-700'
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <span className="text-lg">{language.flag}</span>
                          <span>{language.name}</span>
                          {currentLanguage === language.code && (
                            <div className="ml-auto">
                              <div className="w-2 h-2 bg-blue-600 rounded-full" />
                            </div>
                          )}
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="lg:hidden relative z-50 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200"
              >
                {isMenuOpen ? (
                  <X className="w-6 h-6 text-gray-700" />
                ) : (
                  <Menu className="w-6 h-6 text-gray-700" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é */}
      <div
        className={`fixed inset-0 z-40 lg:hidden transition-all duration-300 ${
          isMenuOpen ? 'opacity-100 visible' : 'opacity-0 invisible'
        }`}
      >
        {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–π —Ñ–æ–Ω */}
        <div
          className="absolute inset-0 bg-black/50 backdrop-blur-sm"
          onClick={() => setIsMenuOpen(false)}
        />
        
        {/* –ú–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é */}
        <div
          className={`absolute top-0 right-0 h-full w-80 max-w-[90vw] bg-white shadow-2xl transition-transform duration-300 ${
            isMenuOpen ? 'translate-x-0' : 'translate-x-full'
          }`}
        >
          <div className="p-6 pt-24">
            
            {/* –ú–æ–±—ñ–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è */}
            <nav className="space-y-2">
              {navigationItems.map((item) => (
                <button
                  key={item.id}
                  onClick={() => handleNavClick(item.id)}
                  className={`w-full text-left px-4 py-3 rounded-xl font-medium transition-all duration-200 ${
                    activeSection === item.id
                      ? 'text-blue-600 bg-blue-50 border-l-4 border-blue-600'
                      : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <item.icon className="w-5 h-5" />
                    <span>{getTranslation(item.label, item.label)}</span>
                  </div>
                </button>
              ))}
            </nav>

            {/* –ú–æ–±—ñ–ª—å–Ω–∏–π –ø–µ—Ä–µ–º–∏–∫–∞—á –º–æ–≤–∏ */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <div className="flex items-center space-x-2 mb-4">
                <Globe className="w-5 h-5 text-gray-600" />
                <span className="text-sm font-medium text-gray-700">
                  {getTranslation('common.language', '–ú–æ–≤–∞')}
                </span>
              </div>
              
              <div className="space-y-2">
                {languages.map((language) => (
                  <button
                    key={language.code}
                    onClick={() => handleLanguageChange(language.code)}
                    className={`w-full text-left px-4 py-3 rounded-lg transition-all duration-200 ${
                      currentLanguage === language.code 
                        ? 'text-blue-600 bg-blue-50 border border-blue-200 font-medium' 
                        : 'text-gray-700 hover:bg-gray-50 border border-gray-200'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className="text-xl">{language.flag}</span>
                        <span>{language.name}</span>
                      </div>
                      {currentLanguage === language.code && (
                        <div className="w-2 h-2 bg-blue-600 rounded-full" />
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ModernStickyNavbar;